'use strict';

// 코딩테스트 크게 9가지! 

// 선택과 집중을 하면.. 

// 1. 완전탐색 
// => 모든 경우를 직접 탐색한다. 

// 2. 그래프 탐색 
// => 실제 개발 과정에서 그래프로 표현한게 많음, 네트워크나 db등등.. 
// => 격자형 그래프, 일반그래프, tree등이 자주 나옴. 

// 3. 동적 프로그래밍 

// 4. 이분 탐색 (매개 변수 탐색, parametic search)

// 5. 두 포인터 

// 6. 그리디 기법 

// 7. 최단거리 (다익스트라, Floyd-warshall, Bellman-Ford)

// 8. 트리 (거의 x)
// 9. 위상정렬(거의 x)


// ✨ 회사 별 공부방법 ✨
// 1. 삼성 (⭐️백준 골드 1 2정도⭐️) => ❗️문제를 이해하는 것이 훨씬 중요❗️
    // - 2차원 격자를 다양한 방식으로 조작해보기 (뒤집기, 회전하기, 소용돌이)
    // - 완전탐색과 그래프 탐색 위주이다!!! => 탐색 필수! 
    // - 자료구조 직접 구현해보기 => Double Linked List 등등..
    // - 노하우 : ❗️질문을 한 줄씩 천천히 읽고 조건 나열하기❗️
    // ==> 단 한 줄 이라도 건너뛰지말고 정신 차리고 한줄한줄 무조건 조건 나열하기! 
    // => 나열 후 필요한 자료구조와 모듈을 디자인을 하고 시작! 

// 2. 네이버 ( ⭐️백준 골드 3이상은 풀어야 간다⭐️ )
    // 가장 쉬운 문제 => 백준 실버(3) 정도
    // 기본 자료구조를 사용하는 문제 (큐, 스택) 실버 2정도? 
    // 배열 조작 => 회전, 반사 (골드 4 5정도)
    // 그래프 탐색 + 순열 완전 탐색 (골드 2 3 정도)

    // 하반기 문제 (골드 다 풀 줄 알면.... 대기업 가긴가나보네..)
    // 1. 단순 구현 (실버 3 4)
    // 2. 복잡한 정렬(실버 1 골드 5정도)
    // 3. 육각 배열(골드 4 5) 
    // 4. 완전탐색 + 그리디(골드 1 2)

    // 결론 : 골드문제 계속 풀어봐야한다.... => 즉, 골드 5까지는 전부 다 맞혀야한다!!! 

// 3. 네이버 클라우드 (대부분 골드 문제나옴!!!)
    // 4문제 출시 
    // 그래프 탐색(골드 4 5)
    // 동적 프로그래밍(골드 3 4)
    // Parametric Search (골드 1) => ❗️대부분이 못 품❗️
    // 누적 합(ad-hoc) (골드 3)

// 4. 네이버 파이낸셜 
    // 상반기 
    // 1. 단순 구현 ❗️실버 3 4❗️
    // 2. 배열 조작(회오리) ❗️실버 1❗️
    // 3. 단순 구현 ❗️실버 1 2❗️
    // 4. 동적 프로그래밍 ❗️골드 3 4❗️ => 하나가 어려운 문제. 

    // 하반기 
    // 1. 단순 반복 ❗️실버 3 4❗️
    // 2. 최단거리 + 이분탐색 ❗️골드 3 4❗️
    // 3. 그리디 ❗️골드 2❗️

// ⭐️ 네이버 tip 정리 ❗️골드 3까지는 풀 줄 알아야한다❗️⭐️
// 1. 배열을 잘 다뤄야한다!! => 회전, 반사 등등 
// 2. 완전탐색 
// 3. 그래프 탐색 
// ❗️하나씩 어려운 문제가 꼭 껴 있는데 남들도 못 푸니까 좌절하지마❗️
// ❗️꼭 오답노트 ====> 한 번에 맞히는거 진짜 불가능해
// ❗️ 틀린 걸 빨리 수정하려는 마인드라고 풀었어야 돼❗️
// ❗️==> 그럼 오답노트에서 내가 어떤 걸 틀렸는지 정확히 파악하는 능력이 필요해!! ❗️

// 내가 뭘 실수 하는지 파악하는 방법 
// 브론즈 2 - 실버 3까지의 문제를 꼭 많이 풀면서 파악을 해보자!
// 골드 문제를 틀리면, 틀린 부분이 의심가는 부분이 너무 많아..... 
// 근데 쉬운 문제를 틀리면 알고리즘 문제가 아니라, 내가 그냥 못 구현한거야. 
// 그래서 내 바닥을 보기위해선 쉬운 문제를 많이 풀면서, 
// 틀린 걸 찾아가면서 빠르고 많이 풀려는 노력을 많이 해라!!! 

// 오답노트 작성 tip => 구글링 해보자. 


// ⭐️카카오 => 7문제 ❗️5❗️시간⭐️
// 앞에 말 한 8가지 알고리즘이 전부 출제된다. 
// - 프로그래머스에 원본이 올라오고, 기술 블로그에 해설도 올라온다!!!!!!!!!!!! 
// - 우리는 이런거 푸는 사람 원하니까 오고싶으면 이거 공부해~ 
// - 자기 문제 드러내는게 진짜 쉬운게 아닌데,, 대단한 거! 

// 카카오 tip
// 1. 7번의 경우 없다고 생각하고 1-5에 집중하기
// 2. 한 문제에 꼭 수상한 점이 있다. => 그걸 찾아야 한다. 
// 3. ❗️모든 유형❗️ ✨모든 난이도✨ 싹 다 공부해야돼....ㅠㅠ
// 4. ❗️완전 탐색으로 정확성 부분 점수를 꼭 얻어야한다❗️
// 5. sw expert academy가 카카오 문제 공부하기 좋다! 

// 카카오 ❗️인턴❗️ 문제 
// 상반기 
// -1) 매개 변수 탐색 (실버 1) => 쉬운 매개변수 탐색
// -3) 매개 변수 탐색 (골드 2) => 어려운 매개변수 탐색..
// -2) 수학 & 그리디 (골드 4 5)

// 하반기 
// -1) 관찰 (브론즈 1 실버 5)
// -2) 관찰 & 수학 (골드 2 3)
// -3) 관찰 & 그래프 정의 및 탐색(골드 2) => 그래프 탐색 문제. 



// 요약 
// 1. 삼성 : 유니크한 문제 스타일 ( 긴 지문 / 자료구조 구현 / 모듈화 코드 / ❗️끈기❗️)
// 2. 네이버 : 비교적 낮은 난이도.. (실수 줄이기 / 복습 + 확실한 이해 / 오답 노트 )
// 3. 카카오 : 알고리즘 최고 난이도 
// 4. 나머지 회사 -> 무조건 네이버 ~ 카카오 사이의 난이도.


// 공부 방법 추천! 
// ⭐️ 한 문제를 정확히 이해하고 넘어가자 ⭐️
// - 여러 문제를 30분씩 푸는 것 보다 한 문제를 4-5시간 풀고 정확히 이해하는 것이 훨씬 중요하다. 
// - ❗️꼭 문제들을 전부 다 이렇게 이해하고 넘어가자❗️
// 👉 방법
// 짝을 이뤄서 서로에게 설명하기 
// (설명자) : 청취자가 아무것도 모른다고 생각하고, 매우 자세하게 설명하기. 
// -> 저는 이런 접근법을 시도했습니다. 
// (청취자) => 모르는 것이 있으면 질문을 꼭 하기  
// ❗️프로그래밍 언어는 꼭 일치할 필요가 없다❗️ => 문제풀이를 설명하는 스터디는 꼭 설명할 필요 없어. 

// 👉 방법2 
// 주석을 정말 진짜 역대급으로 자세하게 달기 
// 변수 : 의미를 꼭 설명하기 => 왜 이 변수가 필요했고, 어떤 역할의 변수인지. 
// 함수 : 입, 출력, 시간복잡도 설명하기 
// 조건문 : 어떤 조건을 체크하기 위해서 썼는지. 
// 반복문 : 어떤 걸 위해서 반복을 했는지
// 최종 : 모든 줄 마다 이게 왜 필요한지 다 쓰기 => ❗️100퍼 도움된다❗️

// ex) 
// int Q, N, M; // Q : 쿼리개수, N : 벨트개수, M : 상자개수 
// function // 파라미터는 이거고, 왜 필요하고, 이런 함수이다. 
// if문 마다 // 어떤 조건인지 다 써놓는다. 

let number = 10; // num1 : 사용자가 입력한 숫자 

/**
 * ❗️ 사용자가 입력한 숫자를 출력해주는 함수 ❗️
 * @param {*} num : 사용자가 입력한 숫자를 파라미터로 받는다. 
 */
let printInputNumber = (num) => {
    return num;
}
console.log(`사용자가 입력한 숫자 >> ${printInputNumber(number)}`);


// ⭐️ ⭕️시간을 꼭 정해놓고 풀자⭕️ ⭐️
// 삼성기출 : 2시간 
// ~ 실버까지 : 1시간 
// ~ 골드까지 : 2시간 
// 👉 시험시간에 익숙해지기 위함, 다른것도 할 게 많은데, 시간을 너무 알고리즘에 올인하면 안 돼! 

// 👉 시간안에 못 풀었을 경우. (어차피 2시간 안에 못 푼거면 10시간을 풀어도 의미없어)
// - 과감하게 (3일 뒤에)처음부터 다시 해설을 보고 푼다. 
// * 막혔던 부분이 해결되는 지 확인
// * 실수가 줄어드는 지 확인
// * 시간이 줄어드는 지 확인 
// ❗️다시 푸는 게 의미가 있나요?❗️
// => 코테에선 내가 모르는 걸 잘 해결했는지, 확인할 수 있는 수단이 다시 푸는 거야❗️

// ⭐️❗️ 다음 질문들에 대해 대답해보자 ❗️⭐️
// -1) 시간 복잡도는? 
// * step마다 계산하고 설명하기 

// -2) 공간 복잡도는? 
// * 사용한 자료구조 마다 계산하고, 설명하기 

// -3) 어려웠던 부분은? 
// * 어떻게 해결했는 지 설명하기 
// ❗️쥐어 짜서라도 말 해보기❗️ 

// ❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️ 정리 ❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️
// 1. 정확히 이해하고 넘어가기 
// -) 특정 알고리즘에 대해 공부를 이제 막 공부하고 있는 중이라면, 다른 사람 코드 자주 봐! 
// -) 변수, 함수, 반복문 전부 뭐에 관한거고 왜 썼는지 설명, 
// -) 스터디를 한다면 그 사람과 꼭 자세하게 주고받기 

// 2. 시간을 정해놓고 풀기 (3일 뒤에 다시 푼다)
// -) 실버까지 (1시간)
// -) 골드까지 (2시간)

// 3. 다 푼 다음에 시간복잡도, 공간복잡도, 어려웠던 부분에 대해 설명하기. 