"use strict";
// 맨 오른쪽 아이템 넣기(엔큐) : rear(리어) : 값이 들어오는 공간
// 맨 왼쪽 아이템 삭제(디큐) : front(프론트) : 값이 나가는 공간
// 프론트는 디큐 될 때 마다 위치가 바뀐다.
// 데이터의 개수가 줄어들면 front도 줄어들고, rear는 변하지 않아.
// 즉, 길이 : rear - front + 1

// 큐 : 선형 큐, 환형 큐

// 1 2 3 4 5순으로 들어왔으니까 나갈 때도..
// ❗️2번이 작업을 다 끝내도 1번이 못 나가면 나갈 수 없어❗️

// 🔴 코딩테스트 큐 문제유형 🔴
// 1. 긴 파이프를 통과하는 변수들
// - 딱 봐도 파이프가 큐 역할 하는구나.. 라고 생각하면 돼!

// 2. 어떤 변수를 모아뒀다가 한 번에 쏟아져 나올 때!
// -> 어떤 작업이 다 끝나야 ❗️순서대로 나오는 문제❗️
// -> 사람이 다 나가는데 얼마나 걸리는지!
// ❗️순서가 나오면 queue❗️

// 🔴 선형 큐는 배열을 큐 처럼 사용할 수 있지만 어렵다 🔴
let queue = [2, 4, 6, 7];
// - 자바스크립트는 빈 공간이 자동으로 채워진다.
// - 추가로 배열에 엔큐 될 때도 계속 늘어남.
// ❗️ 자바스크립트에서는 배열이 자유롭게 증가, 감소된다 => 빈 공간이 발생할리는 없음. ❗️
// ❗️ 하지만 무한정 배열이 늘어난다는 단점이 존재한다 ❗️

// 이걸 해결하기 위해선 연결리스트로 큐를 구현하자!
// head => front
// tail => tail

// 🔴 배열로 큐를 구현하는 방식이 생각보다 간단하니까 코테때 이걸 쓰자 🔴
// 구현은 다음 페이지에.
