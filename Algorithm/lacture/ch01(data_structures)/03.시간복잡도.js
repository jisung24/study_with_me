"use strict";
// 알고리즘 : 문제해결 방법
// 👉 만약 31245를 오름차순 한다면?

// 알고리즘을 했을 때 시간이 얼마나 걸릴까?
// 5개를 실행했을 떈 괜찮은데 1000개 10000개면 느려지지 않을까?

// ❗️우리는 실행시간을 미리 계산할 줄 알아야한다❗️
// 프로그램 시작 코딩 1번째 줄 부터 끝까지 얼마나 걸리는 지 미리 시간복잡도를 계산할 줄 알아야 함.

// 빅 오 표기법 : 복잡한 시간복잡도를 간단하게 나타내기 위한 방법 => 점근 표시함
// 시간복잡도를 그냥 최고차항만 표시해서 점근적으로 나타낸다.

// 코딩테스트를 위한 시간복잡도
// 코딩테스트 항상 4단계로 나눠서 풀기
// 1. 문제 이해 : n을 보고 시간복잡도 예상해서 O()몇 으로 풀 지 정하기!
// 2. 접근 방법 : 어떤 자료구조 알고리즘을 쓸 건 지(우리가 알고리즘 자료구조를 배우는 이유! => 문제 접근 방법을 익히기 위해서.)

// 3. 코드 설계
// 4. 코드 구현

// 문제 푸는 방법
// 👉 step1 : 제약조건을 보자!
// ❗️풀 수 있는 알고리즘은 많아! => 단, 효율적인 실행시간이 적은 알고리즘으로 문제를 풀 수 있는 지 묻는거야❗️
// ❗️⭐️ 10^8을 넘으면 시간초과 날 가능성이 매우 높다 ⭐️❗️
// 1 <= n <= 10^5 👉 O(nlogn)이하 로만 풀어야 한다 (이중 반복문 절대 x)
// 1 <= n <= 10^4 👉 O(nlogn)이하로만 풀어야 한다 (이중 반복문 절대 x)
// 1 <= n <= 10^3 👉 O(n^2)으로도 풀 수 있다. (이중 반복문 가능) => 그래봤다 10의 6제곱이라서.
// 1 <= n <= 7 👉 너무 작으니까 일단 어떻게든 구현만 하면 된다는 뜻.

// 문제
// 1. 제약조건 보기
// 2 <= n <= 10^4 (N^2로 풀면 10^8넘음) => nlogn이하로만 풀어야 해!
// ❗️ n의 기준 : n이 커질수록 실행시간이 증가하면 그게 n이야 ❗️

{
  let arr = [4, 1, 9, 7, 5, 3, 16];
  let target = 14;
}
