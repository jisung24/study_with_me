"use strict";
// 자료구조 : 자료들을 빠르게 처리해주는 기계(종류가 다양함)

// 데이터를 저장하는 곳은? 메모리

// 메모리 종류
// HHD, RAM

// 구조를 한 번 메모리 관점에서 파악해보자.
// 1. linked list : 자료들을 연속적으로 저장하진 않지만,
// 각 노드가 다음 노드의 위치를 가리키면서 순서가 유지는 된다.

// 2. 배열 : 자료들을 연속적, 순차적으로 저장한다.
// -> 순서가 유지가 돼야 해서 삭제나 삽입이 일어났을 경우, 그 빈 공간을 없애기 위해 뒤 원소들이 움직여서
// -> 그 공간을 커버해줘야 한다.

// 장, 단점
// 배열 : 접근이 쉽다
// 연결리스트 : 접근이 어려움(처음부터 차례차례 접근해야함)
// -> 단 데이터 추가 삭제가 쉬움.(화살표만 바꿔주면 돼!)

// 데이터 단위 : 1bit가 있지만 보통 8칸을 하나로 쓴다.
// 즉, 1byte(8칸을 한 칸 이라고 생각하면 편함)

// 1byte가 1024개 모이면 1kb가 된다. (아래로 1024개 생각)
// 1kb가 1024개(오른쪽으로)모이면 1MB가 된다.
// 즉, 1byte단위로 [1024][1024]인 2차원 배열을 생각해보면 돼!

// ❗️저 각 1byte 즉, 한 칸을 접근하기 위해 모든 메모리 byte단위로 주소값을 부여해줌.
// c언어에서는 정수 4byte => 즉, 32칸(크게보면 4칸)

// ❗️컴퓨터는 숫자만 저장할 수 있어❗️
// 그렇다면 문자는 어떻게 표현해?
// => 128개의 문자를 숫자와 대칭시킨 ascii code가 있음
// 그래서 저걸 보고, 숫자로 변환돼서 메모리에 저장됨.

// 연결리스트
// - 값만 저장이 돼 있다면, 순차적이 보장이 안 됨.
// - 따라서 주소값까지 저장해서 순서를 보장하고, 연속성을 보장한다.
// - 값과 다음 주소값을 묶어서 노드...라고 한다.
