"use strict";
// 전 강의 복습
// 1. 자료구조 : 자료들을 메모리에 배치시키는 방법
// - 자료구조 마다 자료들이 처리되는 방식이 다르다.
// - 따라서 처리방식 마다 유리한 자료구조들이 존재해.
// ex) 삭제 삽입은 배열보단 연결리스트
// ex) 접근은 연결리스트보단 배열(random Access)

// 2. 자료들이 어떻게 배치되는지를 메모리에서 충분히 이해하는 게 좋다.
// - 즉, 그냥 그림을 그리면서 자료구조 마다 처리되는 방식을 그리자..!

// 알고리즘 : 문제를 해결하기 위한 가장 적합한 방식
// -> 자료구조에서 자료 처리 방식에 따라서 사용할 수 있는 알고리즘도 다르다.
// -> ❗️ 그럼 우리가 작성한 알고리즘이 시간이 얼마나 걸릴까? ❗️

// 프로그램을 실행하면 cpu가 코드를 한 줄 한 줄 읽고 처리한다.
// Running Time : 프로젝트를 실행한 시점부터 끝날 때 까지의 시간.

// 반복문이란, 반복문 내부의 코드를 ❗️n번 실행시켜주는 코드❗️를 의미해.

{
  let num1 = 3; // 2ns
  let sum = 0;
  for (let i = 0; i < num1; i++) {
    sum += i; // 2초 걸린다면, n번 반복이면 2n시간이 소요된다.
  }
  console.log(sum);

  // 시간 복잡도는 2n + 상수

  // 이중 반복문이라면?
  let n = 1000;
  for (let i = 1; i < n; i++) {
    // 또 n 만큼 반복해.
    for (let j = 1; j < n; j++) {
      // n의 시간이 걸리는 코드를..
      // n^2이 되는거야.
    }
  }
}

// 5 n^2 + 3n + 30
// 이와 같이 복잡한 시간복잡도를 간단하게 표현하는 방식을 ❗️빅오 표현법❗️ 이라고 한다.
// 1. 최고차항의 계수는 생략하고 최고차항만 나타낸다.
// O(n^2)로 나타낼 수 있음. ==> 이를 점근 표기법 이라고 한다.

// 아무리 2중 반복문 n^2라도 매번 이러진 않고 달라질 수 있다.
// 이를 best case, average case, worst case라고 한다.

// 시간복잡도는 worst case를 기준으로 잡기 때문에 항상 똑같이 된다.!!
