"use strict";
let users = ["김지성", "박현태", "박남준", "이재혁", "조홍래", "장종운"];
// ❗️자료구조 1 : 배열❗️
// - 연관된 data가 연속적으로(옆에 나란히 붙어서) 보관된다.
// - 그리고 각각의 원소들은 index를 가진다(0번부터)

// - 일반적으로는 크기를 동적으로 늘릴 순 없다.(하지만 자바스크립트와 같이 스크립트 언어는 동적으로 크기가 증감 가능하다)
// ❗️즉 자바스크립트 배열은 여러 값이 들어갈 수 있고, 크기가 고정되어있지 않다❗️
// - 원하는 원소의 index를 알고있다면 O(1)로 찾을 수 있다.

// << ⭕️ 자바스크립트 배열 생성 ⭕️ >>
// 1. 빈 배열 생성(❗️리터럴 방식❗️) => 객체 생성보다 약간의 좋은 성능을 보임.
{
  let arr = [];
  console.log(arr);
}
// 2. 미리 초기화 된 array생성
{
  let arr = [1, 2, 4, 5, 7];
  console.log(arr);
}

// 3. 많은 같은 값으로 초기화를 할 경우 fill을 사용할 수 있음.
{
  let arr = Array(20).fill(3);
  console.log(arr); // 3으로 20개!
}

// 4. 로직으로 배열을 초기화 해 줄 경우 : 1부터 100까지를 넣어줌.
{
  let arr = Array.from({ length: 100 }, (_, i) => i + 1);
  console.log(arr);
}

// << ⭕️ 자바스크립트 배열 읽기, 값 찾기, 값 추가, 값 삭제 ⭕️ >>
{
  let arr = Array.from({ length: 10 }, (_, i) => i + 1);
  console.log(arr);

  // 읽기 : 시간복잡도 상수시간
  // - 읽기는 0번을 접근하나 10000번을 접근하나 시간 똑같아.
  console.log(arr[3]); // 3번 인덱스 값 읽기.

  // 값 찾기
  // - 배열에 값이 뭐가 있는 지 알 수 없다.
  // - 따라서 가장 마지막에 있는 자료가 있다면 선형 시간이 걸리게 된다.
  // - 찾는 함수 => includes, indexOf, lastIndexOf 등등
  // - ❗️따라서 배열에서 값을 찾는 로직은 좋지 않아❗️
  console.log(arr.indexOf(10)); // 9번 => 가장 마지막 원소 => 선형시간이 걸림.

  // 값 추가
  // 맨 뒤 추가 : push() : O(1)
  // 맨 앞 추가 : unshift("요소") : O(n) => 0번 뒤에 있는 모든 요소들을 싹 다 뒤로 밀어야 돼!
  // 중간 추가 : splice(1, 2, "hello", "") => index 1번 자리부터 2개를 삭제하고 그 자리에 뒤 인자로 받은 애들 넣자.

  let values = ["사과", "배", "바나나", "키위", "참외"];
  let removed = values.splice(0, 2); // 0번부터 2개를 삭제하고,
  // ❗️삭제한 요소를 반환해줘❗️
  console.log(values); // [ '바나나', '키위', '참외' ]
  console.log(removed); // [ '사과', '배' ]
  values.splice(3, 0, "3번부터", "4번부터!");
  console.log(values);

  values.splice(0, 0, "맨 앞", "그 다음");
  console.log(values);

  // 배열 삭제
  // 맨 뒤 삭제 : pop() : 상수 시간이야! => 그냥 뒤에꺼는 알아서 삭제하면 돼!
  // 맨 앞 삭제 : shift() : O(N) => 맨 앞 원소 삭제하고, 다 앞으로 이동시켜줘야 돼...
  // ❗️shift는 On이니까 웬만하면 쓰지말자...
  // 중간 삭제 : splice(1, 3); // 1번부터 3개나 삭제한다.

  //❗️추가 삭제 검색 => 배열 안 좋아!❗️
  // 특히 shift, unshift, splice(삭제 추가가 다 일어나서 좀 많이 커...)
  // 저런 함수들 자주쓰면 시간복잡도 미친다... 전부 다 선형시간이야.
}
