"use strict";
// 자료구조
// => 데이터가 1개라면 난 뭐 할 게 없어...
// => 근데 데이터가 1000만개 1억개야.. 그럼 정리정돈을 잘 해놔야겠지?
// => 필요한 데이터를 빠르게 찾아쓰기 위해서..!
// ❗️결국 데이터를 정리해놓은 것❗️

// 언제 어떻게 정리를 해야하는 지 알면 이해가 쉬워!
// => 정리를 하는 방법에 따라서 각각의 장점이 있어!

// 내가 해야하는 건 4가지!

// 1. 접근해서 값 읽기
// 2. 검색(검색바)
// 3. 값 추가
// 4. 값 삭제
// 읽기, 검색, 추가, 삭제

// 각 정리해야하는 방법이 다르다!

// 🔴 배열 🔴
// ======== << 배열 >> ========
// 1. 읽기 => 매우 좋다
// 2. 추가 => 맨 끝 추가는 좋음 (중간, 처음은 진짜 느림..)
// 3. 삭제 => 역시 가장 끝 삭제는 빠름 (처음, 중간은 느림)
// 4. 검색 => 무슨 값이 있는 지 몰라서 느림 (하나하나 다 뒤집어 봐야 함.)
// => 최악의 경우 끝까지 다 찾아봤는데 값이 없어..!

// 배열에서 앞에서부터 찾는 걸 선형 탐색 방법이라고 한다.
// => 그닥 빠르지 않음
{
  // 선형 검색!
  let arr = [1, 2, 3, 4, 5, 6];
  let target = 6;
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === 6) {
      console.log(1);
    } else {
      console.log("..못 찾음!");
    }
  }

  // 함수 indexOf, find
  let arr2 = [3, 2, 1, 56, 7, 4, 2, 9];
  console.log(arr2.indexOf(4)); // 있으면 4의 index 없으면 -1;

  // 자 정리!
  // 삽입, 삭제 => 데이터가 1억개야!... 그럼 언제 자리 공간 마련해주고, 매꿔주고 그러고있어...
  // 접근 => 자료가 몇 개든 간에, 빠른 속도로 접근이 가능하다.
  // 검색 => 언제 다 뒤집어봐... 1억개를...!
}

// 그럼 접근은 배열로 하면 되고...
// 검색, 추가, 삭제에 괜찮은 정리 방법이 있어?

// 모든 정리 방법은 배열  ||  연결리스트 중 하나로 구현 해!

// 검색 알고리즘

// 정렬을 하는 데 n^2과 NlogN이 걸리기도 한다.

// 해시 테이블 => 매우매우매우매우 중요한 자료구조!
// =>
