"use strict";
// + - ()를 가지고 식을 만듦.
// 이 식의 값을 최소로 만드려고 한다..!
// 40 - 20 - 70 + 60
// -부터 -까지 계속 괄호를 치면 돼!

// -가 안 나온다면 끝까지..!

// 과연 이게 왜 그리디야...?

// 1. +로만 이루어진 식
// => 이건 그냥 더할 수 밖에 없어...!

// 2. -40 + 50은 -를 해줄건데 일단 40 + 50~ 이렇게 된다.

// 그래서 1. 끝날 때 까지도 -가 안나오면...!
// 그냥 끝까지 묶어준다.

// -40 - 40
// 2. 다음 -까지만 묶어준다..!
// -> 1번도 포함이 돼...!

// 왜 그리디냐면...
// -을 기준으로 최대한 많은 수를 묶으면 돼!!
// 선택은 -야!
// 선택은 1개인데, 그럴 때 마다 최대한 많은 수를 묶으면 돼!!
let input = require("fs").readFileSync("dev/stdin").toString().split("\n");
let numbers = input[0].split("-"); // 이렇게 -로 나눠준다.
let sum = 0;
for (let i = 0; i < numbers.length; i++) {
  let cur = numbers[i]
    .split("+")
    .map(Number)
    .reduce((acc, cur) => acc + cur);

  if (i === 0) {
    // 첫 번째는 항상 cur(-로 시작하지 않기 때문에...!)
    sum += cur;
  } else {
    sum -= cur; // 두 번째 부터는 항상 -마이너스 해준다.
  }
}
console.log(sum);

// -를 만나면 최대한 많이 묶어준다...!
// => 무조건 많이 묶어줘..!

// 선택 => -가 됨.
// 즉 선택할 수 있는 상황은 -가 오는 상황 1개
// 그럼 그 상황 때 마다 무조건 많이 뒤 수를 묶어주면 돼..!

// (90 + 30) - (20 + 50) - (30 + 70) - (70 + 20)
// 즉 이런식으로..!
// 저걸 배열로 만들면 split('-') 해주면 돼!

// 일단 상황을 생각해보자...
// - 이게 왜 그리디지..?

// [5000, 1000, 500, 100, 50, 10, 1]
// [각 식]
// 될 때 까지 상황을 찾아..
// 그럼 동전문제에선 500원 부터 상황이 된다고 치면,
// 각 식은 -를 만날 때 부터 상황이 허락해..!

// -를 만나면 뒤에 수들을 -가 올 때 까지(안오고 끝나면 그냥 끝까지)
// 묶어주면 돼...!

// 봐봐
// => 이렇게 각 상황을 만드는 거..
// => 각 상황에서 선택하는 걸로 잘 보면 나눠지는데,
// 🟡 내가 못 보고 있잖아...!!! 🟡
// 1. 여러 가지 상황이 주어지는 것
// 2. 그 중 최적의 상황을 선택하는 것 (❗️고도의 생각이 필요해❗️)
