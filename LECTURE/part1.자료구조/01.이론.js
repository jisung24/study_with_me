"use strict";

// 자료구조란?
// - 여러 자료를 담는 구조

// 👉 자료구조 필요성
// 만약 물건이 3개 정도면, 물건들을 정리 안 해놔도 쉽게 찾을 수 있다
// 하지만 물건들이 1000000개면?
// 정리를 해놓지 않고는 찾기 힘들겠지?

// 즉, 처리를 할 때 특정 자료구조를 선택해서, 처리한다.

// 1. 접근이 빠른 자료구조
// 2. 접근은 느린데, 삽입 삭제가 빠른 자료구조.

// => 내가 만약 접근을 빠르게 하고싶다면 1번을 선택하고, 삽입,삭제를 하려면 2번을 선택해서 처리해야 돼!

// 즉, 내가 할 목적을 밝히고, 그 목적에 유리한 자료구조를 선택해야 한다.

// ❗️데이터의 개수가 적거나 거의 없다면 어떤 자료구조를 쓰더라고 괜찮음❗️
// 👉 하지만 많을 때는 현저하게 느려진다

// 🔴 자료구조 종류 🔴
// 1. 선형구조
// 정의 : 하나의 데이터 뒤에 다른 데이터가 하나만 존재하는 자료구조
// -> 배열(array)
// -> 연결리스트(linked list)
// -> 스택(stack)
// -> 큐(queue)

// 2. 비선형구조
// 정의 : 하나의 데이터 뒤에 다른 데이터가 여러 개 존재할 수 있다.
// -> 트리(tree)
// -> 그래프(graph)

// 🔴 성능 측정방법 🔴

// - 시간 복잡도 : 알고리즘에 사용되는 연산 횟수
// - 공간 복잡도 : 알골리즘에 사용되는 메모리의 양을 측정한다.
// ===> 공간을 많이 사용하는 대신 시간을 단축하는 방법이 흔히 사용된다(hash)

{
  let n = 10;
  let sum = 0;

  // - O(N)
  // n의 수가 커지면 커질수록, 반복문 횟수가 증가한다.
  for (let i = 0; i < n; i++) {
    sum += i; // 그냥 사직연산 (O(1))
  }

  console.log(sum);
}

{
  // O(N^2)
  let n = 9;
  for (let i = 1; i <= n; i++) {
    // 얘도 n만큼 돌고
    for (let j = 1; j <= n; j++) {
      // 얘도 n만큼 돈다...!
      console.log(`${i} * ${j} == ${i * j}`);
    }
    console.log(`========== ${i}단 끝 ==========`);
  }

  // 겉도 9번 N만큼 돌고
  // 안에도 n만큼 돈다..!
  // 따라서 무조건 O(N^2);
}
