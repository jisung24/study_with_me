// 자료구조

// 결국 데이터를 정리하는거야!
// 멋있어 보이려고 하는 게 아니라.
// 어떻게 정리가 잘 되어 있느냐에 따라서 ❗️스피드❗️에 영향끼침
// 🔴 프로그램이 훨씬 빨라져 🔴

// 🟡 언제 어떤 상황에서 어떤 자료구조를 쓰는 지 아는 것이 너무 중요 🟡
// ex) 검색을 계속 하고싶은데, 자료들이 빨라 안 나오면 안 되겠지?
// 검색이 빠른 자료구조를 써야 돼! => hash, tree 등등

// 결국 우리가 할 건 4가지야!

// 1. 검색(데이터 검색) : 선형검색 
// 2. 추가(데이터 추가) : 배열 등등
// 3. 삭제(데이터 삭제) : 배열이 최악 
// 4. 조회(데이터에 뭐가 들어있는 지 확인)



// 01. 배열 
// 검색 : 가장 끝에 값이 있을 경우, 없을 경우 => O(N)이 소요됨
// 추가 : 끝에는 O(1) 그 외 지역에는 안 좋음 
// 삭제 : 끝 삭제 O(1) 가능 그 외는 x ❗️그래서 배열로 stack을 O(1)로 구현가능 
// 조회 : index를 이용해서 O(1)로 가능 
// 🔴 자바스크립트 배열은 크기가 늘어나는 동적배열의 기능을 제공해서, 맨 뒤에다가 원소 추가가 가능하다 🔴 
// 즉, ⭐️ 배열의 크기가 가득 차면 자동으로 크기가 늘어난다 => 배열의 사이즈를 미리 정해 둘 필요가 없다 ⭐️
// 🟣 큐는 비효율적.. => 삭제는 연결리스트로 🟣

// 02. 연결리스트 
// 배열과 반대라고 생각하면 돼!!! 
// 삽입과 삭제가 자주 일어나면 연결리스트로 구현해! 
// ❗️대신 처음부터 접근을 계속 해줘야 해서 접근하는데 O(N)이다❗️
// 🔴 따라서 검색도 느리다 => 접근을 해서 확인을 해 봐야 함. 🔴
// 🟡 연결리스트 직접 구현하지 않아도 돼 🟡
// 🔵 배열로 대체 할 수 있음 🔵

