"use strict";
// ❗️2차원 배열 진짜 진짜 열심히 하자❗️
// 그래프의 표현 방식!
// 지역과 길이라고 생각해!!!!
// 방향이 있다면 a에서 b지역으론 갈 수 있지만
// b에서 a로는 가지 못 함!
// 그래서 무방향 그래프일 가능성이 훨씬 높아.!

// 자바스크립트의 동적 배열을 이용해서 그래프를 표현한다.

// 사물을 정점과 간선으로 나타내기 위한 도구
// ex) 지역과 도로
// ex) 지하철 역, 도로

// 표현 방식(❗️2가지❗️)
// 1. 인접 행렬 : 2차원 배열을 사용하는 방식
// -> 2차원 배열로..!

// 2. 인접 리스트 : 연결리스트를 이용하는 방식
// - 일반적인 그래프 문제에선 인접 리스트가 중요하다

// 인접 행렬
let graph = [
  [0, 1, 0, 0], // 1번 노드와는 2번만 연결 돼 있음!
  [1, 0, 1, 1], // 2번과는 1 3 4번이 연결 돼 있음!
  [0, 1, 0, 1], // 3번과는 2 4번이 연결 돼 있음
  [0, 1, 1, 0], // 4번과는 2 3번만 연결 돼 있음!
];

// 인접 리스트 : 훨씬 더 직관적임!!!
// ❗️보통은 이렇게 구현 함❗️
let graph2 = {
  1: [2],
  2: [1, 3, 4],
  3: [2, 4],
  4: [2, 3],
};

// N-Queen 문제
// 기본적인 백트래킹 문제 다 할 수 있어!
// 퀸과 퀸이 서로 공격할 수 없는 공간에 두는 문제
// - 그 체스 퀸 맞아!
// - 각 퀸의 공격 가능 범위를 먼저 체크해준다.

// 자 만약 퀸을 두는 걸 경우의 수로 푼다면...? => 조합을 푼다면...
// 매우매우 커짐...

// 그래서 완전 탐색을 진행을 하더라도 유망한 경우에 대해서만 탐색을 진행한다면?

// ❗️ 각 행 마다 1개씩의 퀸을 놓을 수 있다
// => 같은 행에 있는 퀸은 서로 공격이 가능하기 때문이다.

// 첫 번째 퀸 : 전부 다 놓을 수 있다.
// 2번째 퀸 : 지금부터 계속 경우의 수가 좁혀짐.....!
// 가능한 경우에 한 해서, 재귀함수를 호출한다.

// 매 번 마다 모든 걸 다 볼 필요는 없다!!
// 1개 1개씩 놓는다고 생각하면 너무 좋다!

// 즉 !현재 상태에서! 모든 가능한 경우의 수를..!
// ex) => 엄청난 구현력을 필요로 한다.
// => 응용력이 낮아
//
