"use strict";
// 배열을 어떻게 이용해야 그래프를 효율적으로 표현할 수 있는 지!

// 그래프 : 사물을 정점과 간선으로 나타내기 위한 도구
// 즉, 지역과 도로,
// 그래프를 이용해서 각각의 도시와 도로, 연결

// 구현방식
// 1) 인접 행렬 : 2차원 배열
// 2) 인접 리스트 : 연결 리스트를 이용한 방식
// 인접 리스트를 사용했을 때 쓰임세가 좀 많다.
// => 인접 행렬 방식도 종종 쓰일 때가 있다.

// 연결됐다면 1 아니면 0으로 표현함.!
// 간선에 비용이 있다면 비용을 표시한다.
// ❗️가중치가 있는 그래프❗️
{
  let graph = [
    [0, 3, 7], // 0번 노드에서 0 1 2번으로 가기위한 비용
    [3, 0, "x"], // 연결x
    [7, 0, "x"],
  ];

  // ❗️가중치가 없는 그래프❗️
  let graph2 = [
    [0, 1, 1, 0], // 0번 노드가 0번 1번 2번 3번과 연결
    [1, 0, 1, 0],
    [1, 1, 0, 1],
    [0, 0, 1, 0],
  ];
}

// DFS && BFS
// 1번부터 출발이기 때문에 그래프 0번은 []로 그냥 비워둔다.

let graph = [
  [], // 0번째는 비워둔다. => 왜냐면 거의 1번부터 시작하기 때문이다.
  [2, 3, 4],
  [1],
  [1, 5, 6],
  [1, 7],
  [3, 8],
  [3],
  [4],
  [5],
];

/**
 *
 * @param {*} graph : 탐색할 그래프
 * @param {*} v : 현재 노드
 * @param {*} visited : 탐색을 했는 지 안 했는 지!
 */
let dfs = (graph, v, visited) => {
  // 1. 현재 노드를 방문 처리한다.
  visited[v] = true; // 1번 부터 시작 => true로 만들어줘!
  console.log(v);
  for (let value of graph[v]) {
    // 현재 노드와 연결된 값들!
    if (visited[value] === false) {
      // 만약 방문하지 않았다면
      dfs(graph, value, visited);
    }
  }
};
let visited = Array(9).fill(false); // 0은 제외하고 1부터 8까지! => 아직 false라고 설정!
// flalse값 9개를 만들어준다.!!!
console.log(visited);
dfs(graph, 1, visited);

// 1. 바이러스에 걸렸는 지 걸리지 않았는 지를 true false로 나타냄!
// => 인접한 컴퓨터의 바이러스에 걸렸는 지 아닌 지!

// 1번이 걸렸으면 1번과 연결된 모든 컴퓨터들은 바이러스에 걸림.
