'use strict';
// 비동기 : 학교 성적표 기다리다가 나오면 받는 그거 생각하면 돼! => 언제 성적이 나올 지 모르지만 기다림. 
// ==> 메일도 마찬가지야. 상대방한테 언제 연락이 올 지 모르지만 기다리고, 연락이 오면 바로 받음. 
// ==> 음식 배달! => 언제 올 지 모르지만 기다리잖아 계속. 
// promise 
// 자바스크립트에 존재하는 객체 
// 사실 비동기를 계속 callback함수로 작성하는 방법도 있어. 
// 근데 가독성도 떨어지고 이를 callback hell이라고 부르는데, 콜백 지옥에 걸릴 수 있음.
// ❗️즉 promise는 비동기 통신을 위한 자바스크립트 객체❗️ 

// 상태값 아는 것이 중요 
// 1. pending(아직 하는중.. => 아직 배달중...)
// 2. fulfilled(배달 완성!!!!!)
// 3. rejected(배달 중 어떤 일이 있어서 배달 못 함... => 어떤 일인지는 error message로)

// 보통 프로미스 안에서 좀 무거운 일을 한다. 
// 왜냐면 promise는 비동기인데, 굳이 금방 받아올 수 있다면 동기적으로 했겠지.. 
// 언제 올 지 모르는 무거운 거니까 비동기로 해서 밑에부터 해~ 라고 짜지는거야 코드가.

// 무거운 작업 한 번 해보자. 


// 즉 정리 
// 비동기 왜 써? => 무거운 일을 해야할 때 다음 라인이 실행 못 하고 기다리니까... 
// 어떨 때 써? => 무거운 작업을 처리할때!!!!!!! => 서버에 데이터 받기 
// => 즉 언제 완성이 될 지 모르는 무거운 작업을 하고싶을 때 쓴다. 

// ex) 서버에 동기적으로 data를 요청하면 언제 올 지 어떻게 알아...
// data를 받을 동안 다른 코드는 실행도 못 하고 렌더링도 안 될 수 있어. 
// ✨그래서 비동기로 하면 data가 오면 그냥 아무때나 받으면 돼!✨
// 어차피 나머지는 그냥 자기 할 일 할 수 있어. 

// 다음 라인이 실행이 안 된다가 핵심이야!!!!!! 
// 언제 올 지 모르니까... 
// 이제 비동기 완벽하게 이해함. => 이걸 바탕으로 promise async await을 이해해보자! 
// ====> 다시 마지막으로 정리 
// 1. 언제 동기쓰고 언제 비동기써? 
// 밑에 라인이 실행이 안 되면 큰일나는 코드를 마주햇을 때!!!! 
// ex) 데이터 전송 : 언제 데이터가 올 지 모름 => 그래서 아래 실행이 안되고 올 때까지 기다려야하는 불편함. 

// 그럼 비동기 구현 방법은? 
// 1. 비동기 callback 
// 2. promise객체 이용 
// 3. async await