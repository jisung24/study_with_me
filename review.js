// 자 자료구조 왜 배워?
// 결국 내가 짠 코드의 속도를 향상 시키기 위해서!!!!!!!
// 속도 향상이 목표야! => 질이 높아짐.

// 만약 내가 영화 예매 기능을 짰어.
// 그걸 배열로 아무렇지 않게 그냥 느리게 짰어.
// 기능은 돌아가.. 하지만 ❗️사람이 매우매우 많을 시엔 상당히 느리게 작동해❗️

// ❗️사람이 많을 때, 자료가 많을 때, 최대한 빠르게 작동시켜주기 위함❗️

// 그럼 어떻게 빠르게 작동을 하나요?
// 기능에 최적화된 자료구조와 알고리즘이 있어..!
// 예를들면 삭제를 계속 해야하는데, 배열로 짜게되면, 사람이 많아지면 계속 빈 공간을 매꿔줘야 해서 느림❗️

// 그니까 결론은 어떤 기능을 최대한 빠르게 작동시켜주기 위함.!

// 내가 원하는 기능을 빠르게 작동시켜주기 위함!
// part2
// 결국 프로그래밍은 자료의 입력, 처리, 출력의 과정을 거침

// 처리 : 자료를 입력을 받고, 그 자료에 (접근, 검색, 추가, 삭제)

// "("라면 반복문을 해서 검색을 한다.

// 음 위에 입각해서, 보면
// 괄호가 맞는 지 아닌 지 어떻게 검사를 해줘야 돼??
// 우선 닫는 괄호가 먼저 나오면 바로 안 돼!
// ()이렇게 개수가 맞아야 되고,
// 맨 앞에 )가 나오면 안 되니까 (가 먼저 나와야 해..

let bracket = "()(((()"; // 입력된 자료...! => 우선 저장
let stack = [];

let checkBracket = (bracket) => {
  let stack = [];
  for (let value of bracket) {
    // 값 검색해서 파악해야 함..!
    // 일단 괄호가 올바른 지 알기 위해선 모든 괄호를 다 check해봐야 하니까 O(N)은 깔고간다.
    if (value === "(") {
      stack.push(value); // 스택에 넣는다.
    } else {
      if (stack.length === 0) {
        return false;
      } else {
        stack.pop();
      }
    }
  }

  return stack.length === 0;
  // 어떤 식이 맞는 지 아닌 지 알고싶으면 그냥 그 식만 적어주면 알아서 false true로 바껴...!
};
console.log(checkBracket(bracket));

// 일단 무조건 앞애 (가 있어야 돼!
// )가 먼저 나오면 탈락이니까...!

// ())도 탈락이야..! 앞에 (가 없기 때문에..!
// 그럼 한 번 (를 목숨 +로 생각하고 )를 -라고 생각하는데, -가 되선 안 되는데, 결국 0이 돼야 해!(중간에는 0이 돼도 상관없어.)

// 자 그럼 ([{< 를 한 번 보자...!
// ❗️가장 마지막에 온 여는 괄호가 닫히기 전까지는 그 이전 괄호는 닫힐수가 없어...❗️
// 그래서 괄호 알고리즘을 풀 때는 stack이라는 가장 마지막 요소를 먼저 처리해주는 자료구조를 활용한다.

// 가장 마지막에 오는 자료를 먼저 처리해주는 자료궂호!
// 를 사용해서 알고리즘을 푼다.=

{
  let bracket1 = "({{<>}})";
  let bracket2 = "{<<>})";

  // 가장 나중에 온 괄호가 닫히기 전 까지는 그 전 괄호들은 닫힐 수 없어.
  // 즉, 가장 나중에 온 괄호를 가장 먼저 처리를 해 줘야 하는 stack을 사용해서 풀어보자..!
  let checkBracket = (bracket) => {
    let stack = [];

    for (let value of bracket) {
      if (value === "(" || value === "{" || value === "<") {
        stack.push(value); // stack에 쌓아준다...!
      } else {
        // 만약 닫는 괄호일 경우....
        if (stack.length === 0) {
          return false;
        } else {
          // 안에 여는 괄호가 들어있을 경우...!
          // 닫는 괄호가 나왔다면...!
          if (value === ")") {
            if (stack[stack.length - 1] === "(") {
              stack.pop();
            } else {
              return false;
            }
          }

          if (value === "}") {
            if (stack[stack.length - 1] === "{") {
              stack.pop();
            } else {
              return false;
            }
          }

          if (value === ">") {
            if (stack[stack.length - 1] === "<") {
              stack.pop();
            } else {
              return false;
            }
          }
        }
      }
    }

    return stack.length === 0;
  };

  console.log("괄호검사1 >> ", checkBracket(bracket1));
  console.log("괄호검사2 >> ", checkBracket(bracket2));
}

// 🔴 정리 🔴
// 가장 나중에 온 괄호의 종류가 닫히기 전까지는 닫을 수 없어.
// 즉, 가장 나중에 온 자료가 먼저 처리 돼야 함!!!
// 이건 스택임.. 가장 나중에 온 자료가 먼저 처리 되는 거..!
